{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\product-catalog-app\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/CartContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// 1. Membuat Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// 2. Membuat Hook kustom untuk menggunakan CartContext (opsional tapi memudahkan)\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n\n// 3. Membuat Provider Component\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]); // State untuk menyimpan item di keranjang\n\n  // Fungsi untuk menambahkan produk ke keranjang\n  const addToCart = productToAdd => {\n    setCartItems(prevItems => {\n      // Cek apakah produk sudah ada di keranjang\n      const existingItem = prevItems.find(item => item.id === productToAdd.id);\n      if (existingItem) {\n        // Jika sudah ada, tambahkan quantity-nya\n        return prevItems.map(item => item.id === productToAdd.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        // Jika belum ada, tambahkan produk baru dengan quantity 1\n        return [...prevItems, {\n          ...productToAdd,\n          quantity: 1\n        }];\n      }\n    });\n    console.log('Keranjang setelah ditambah:', cartItems); // Untuk debug\n    alert(`${productToAdd.name} berhasil ditambahkan ke keranjang!`);\n  };\n\n  // Fungsi untuk menghapus produk dari keranjang (contoh fungsi lain)\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n\n  // Fungsi untuk mengupdate kuantitas (contoh fungsi lain)\n  const updateQuantity = (productId, amount) => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: Math.max(0, item.quantity + amount)\n    } // Jangan sampai kurang dari 0\n    : item).filter(item => item.quantity > 0) // Hapus item jika kuantitasnya 0\n    );\n  };\n\n  // Nilai yang akan disediakan oleh Context Provider\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    itemCount: cartItems.reduce((sum, item) => sum + item.quantity, 0) // Jumlah total item\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s2(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport default CartContext; // Ekspor context-nya juga jika diperlukan di tempat lain\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cartItems","setCartItems","addToCart","productToAdd","prevItems","existingItem","find","item","id","map","quantity","console","log","alert","name","removeFromCart","productId","filter","updateQuantity","amount","Math","max","value","itemCount","reduce","sum","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/dev/product-catalog-app/src/context/CartContext.js"],"sourcesContent":["// src/context/CartContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// 1. Membuat Context\r\nconst CartContext = createContext();\r\n\r\n// 2. Membuat Hook kustom untuk menggunakan CartContext (opsional tapi memudahkan)\r\nexport const useCart = () => {\r\n  return useContext(CartContext);\r\n};\r\n\r\n// 3. Membuat Provider Component\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]); // State untuk menyimpan item di keranjang\r\n\r\n  // Fungsi untuk menambahkan produk ke keranjang\r\n  const addToCart = (productToAdd) => {\r\n    setCartItems((prevItems) => {\r\n      // Cek apakah produk sudah ada di keranjang\r\n      const existingItem = prevItems.find(item => item.id === productToAdd.id);\r\n      if (existingItem) {\r\n        // Jika sudah ada, tambahkan quantity-nya\r\n        return prevItems.map(item =>\r\n          item.id === productToAdd.id\r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n      } else {\r\n        // Jika belum ada, tambahkan produk baru dengan quantity 1\r\n        return [...prevItems, { ...productToAdd, quantity: 1 }];\r\n      }\r\n    });\r\n    console.log('Keranjang setelah ditambah:', cartItems); // Untuk debug\r\n    alert(`${productToAdd.name} berhasil ditambahkan ke keranjang!`);\r\n  };\r\n\r\n  // Fungsi untuk menghapus produk dari keranjang (contoh fungsi lain)\r\n  const removeFromCart = (productId) => {\r\n    setCartItems((prevItems) =>\r\n      prevItems.filter(item => item.id !== productId)\r\n    );\r\n  };\r\n\r\n  // Fungsi untuk mengupdate kuantitas (contoh fungsi lain)\r\n  const updateQuantity = (productId, amount) => {\r\n    setCartItems((prevItems) =>\r\n      prevItems.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity: Math.max(0, item.quantity + amount) } // Jangan sampai kurang dari 0\r\n          : item\r\n      ).filter(item => item.quantity > 0) // Hapus item jika kuantitasnya 0\r\n    );\r\n  };\r\n\r\n  // Nilai yang akan disediakan oleh Context Provider\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    itemCount: cartItems.reduce((sum, item) => sum + item.quantity, 0) // Jumlah total item\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\nexport default CartContext; // Ekspor context-nya juga jika diperlukan di tempat lain"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}